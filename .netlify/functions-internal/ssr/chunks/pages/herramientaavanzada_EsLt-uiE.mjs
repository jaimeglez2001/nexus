/* empty css                                   */
import { c as createAstro, d as createComponent, r as renderTemplate, h as renderHead, g as renderComponent } from '../astro_wFK4WpfL.mjs';
import 'kleur/colors';
import 'html-escaper';
import 'clsx';
import { c as create_ssr_component, e as escape, b as add_attribute, a as etapas, v as validate_component, N as NavBar } from './conexionhumana_tFho6f2X.mjs';
/* empty css                                        */

/* src/components/HerramientaAvanzada.svelte generated by Svelte v4.2.8 */

const HerramientaAvanzada = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let firstRow = "";
	let secondRow = "";
	let thirdRow = "";
	let fourthRow = "";
	let inputText = "";

	return `<section class="main w-full flex items-center flex-col"><article class="fases w-full h-[500px] flex items-center justify-center flex-col mb-40"><h4 class="animated text-[--nexusBlue] text-[300px] leading-[60px] tracking-[-120px]" style="white-space: pre-line;">${escape(firstRow)} <br> ${escape(secondRow)} <br> ${escape(thirdRow)} <br> ${escape(fourthRow)}</h4></article> <article class="ctos flex flex-col w-full justify-center items-center mt-20"><label for="inputTexto" data-svelte-h="svelte-3ikihn">Ingresa tus fases</label> <input class="border-2" type="text" id="inputTexto"${add_attribute("value", inputText, 0)}></article></section>`;
});

/* src/components/Tecla.svelte generated by Svelte v4.2.8 */

const Tecla = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { glifo } = $$props;
	let { interpretacion } = $$props;
	if ($$props.glifo === void 0 && $$bindings.glifo && glifo !== void 0) $$bindings.glifo(glifo);
	if ($$props.interpretacion === void 0 && $$bindings.interpretacion && interpretacion !== void 0) $$bindings.interpretacion(interpretacion);
	return `<section class="letra flex flex-col items-center gap-10"><article class="glifo flex items-center justify-center size-[240px] border-2 border-black"><span class="animated text-[240px] text-[--nexusBlue]"><!-- HTML_TAG_START -->${glifo}<!-- HTML_TAG_END --></span></article> <article class="letra flex flex-col gap-4 items-center"><article class="tecla size-[80px] border-2 border-[--nexusBlue] rounded-lg flex items-center justify-center text-4xl uppercase"><!-- HTML_TAG_START -->${glifo}<!-- HTML_TAG_END --></article> <h4 class="highlight_small"><!-- HTML_TAG_START -->${interpretacion}<!-- HTML_TAG_END --></h4></article></section>`;
});

/* src/layouts/DescripcionFases.svelte generated by Svelte v4.2.8 */

const DescripcionFases = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { layout } = $$props;
	let count = 0;

	if ($$props.layout === void 0 && $$bindings.layout && layout !== void 0) $$bindings.layout(layout);

	return `${layout === "horizontal"
	? `<main class="bg-white px-[120px] py-20 flex flex-col justify-center items-center"><section class="max-w-[1500px] flex flex-col gap-10 justify-center"><section class="ctas flex justify-between"><article class="flex flex-col gap-4"><h4 class="highlight_small">${escape(count + 1)} / 10</h4> <h4>Fase de <br> <span class="highlight_small text-[40px]">${escape(etapas[count].fase)}</span></h4></article> <article class="arrows flex gap-4 justify-end items-center"><button class="p-4 border-2 border-black" data-svelte-h="svelte-toplmc"><img src="./public/arrow-left.svg" alt="" class="h-10"></button> <button class="p-4 border-2 border-black" data-svelte-h="svelte-1imldw2"><img src="./public/arrow-right.svg" alt="" class="h-10"></button></article></section> <section class="info flex gap-10 justify-between"><article class="text_wrap bg-[--nexusBlue] max-w-[520px] p-10 flex items-end h-full"><p class="text-white text-[24px] leading-8 tex-pretty">${escape(etapas[count].ejemplo)}</p></article> <article class="tecla flex gap-4">${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[0],
				interpretacion: "Positiva"
			},
			{},
			{}
		)} ${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[1],
				interpretacion: "Neutra"
			},
			{},
			{}
		)} ${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[2],
				interpretacion: "Negativa"
			},
			{},
			{}
		)}</article></section></section></main>`
	: ``} ${layout === "vertical"
	? `<main class="bg-white px-[120px] py-20 flex flex-col justify-center items-center"><section class="max-w-[1500px] flex flex-col gap-6 justify-center"><section class="ctas flex justify-between"><article class="flex items-center gap-10"><h4 class="highlight_small">${escape(count + 1)} / 10</h4> <h4>Fase de <br> <span class="highlight_small text-[40px]">${escape(etapas[count].fase)}</span></h4></article> <article class="arrows flex gap-4 justify-end items-center"><button class="p-4 border-2 border-black" data-svelte-h="svelte-toplmc"><img src="./public/arrow-left.svg" alt="" class="h-10"></button> <button class="p-4 border-2 border-black" data-svelte-h="svelte-1imldw2"><img src="./public/arrow-right.svg" alt="" class="h-10"></button></article></section> <section class="info flex flex-col gap-6 justify-between max-w-[760px]"><article class="text_wrap bg-[--nexusBlue] w-full p-10 flex items-end h-full"><p class="text-white text-[24px] leading-8 tex-pretty">${escape(etapas[count].ejemplo)}</p></article> <article class="tecla flex gap-4">${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[0],
				interpretacion: "Positiva"
			},
			{},
			{}
		)} ${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[1],
				interpretacion: "Neutra"
			},
			{},
			{}
		)} ${validate_component(Tecla, "Tecla").$$render(
			$$result,
			{
				glifo: etapas[count].letra[2],
				interpretacion: "Negativa"
			},
			{},
			{}
		)}</article></section></section></main>`
	: ``}`;
});

const $$Astro = createAstro();
const $$Herramientaavanzada = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Herramientaavanzada;
  return renderTemplate`<html lang="es"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Actualización en Tiempo Real</title><link rel="icon" href="./public/favicon.svg">${renderHead()}</head> <body> <header class="wrap z-1"> ${renderComponent($$result, "NavBar", NavBar, { "nav": "/herramienta" })} <a href="herramienta"><span class="py-4 px-6 border-2 border-[--nexusBlue] highlight_small hover:bg-[--nexusBlue] duration-200 hover:text-white top-40 right-10 fixed">Modo Guiado</span></a> </header> <main class="flex gap-10 justify-center items-center pt-40"> ${renderComponent($$result, "DescripcionFases", DescripcionFases, { "layout": "vertical", "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/Jaime/Documents/PROGRAMACIO\u0301N/astro/nexus/src/layouts/DescripcionFases.svelte", "client:component-export": "default" })} ${renderComponent($$result, "HerramientaAvanzada", HerramientaAvanzada, { "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/Jaime/Documents/PROGRAMACIO\u0301N/astro/nexus/src/components/HerramientaAvanzada.svelte", "client:component-export": "default" })} </main> </body></html>`;
}, "/Users/Jaime/Documents/PROGRAMACIO\u0301N/astro/nexus/src/pages/herramientaavanzada.astro", void 0);

const $$file = "/Users/Jaime/Documents/PROGRAMACIÓN/astro/nexus/src/pages/herramientaavanzada.astro";
const $$url = "/herramientaavanzada";

const herramientaavanzada = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Herramientaavanzada,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { DescripcionFases as D, herramientaavanzada as h };
